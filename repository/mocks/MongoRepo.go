// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mongo "github.com/nqmt/short-url/repository/mongo"
	mock "github.com/stretchr/testify/mock"
)

// MongoRepo is an autogenerated mock type for the MongoRepo type
type MongoRepo struct {
	mock.Mock
}

// GetOriginUrl provides a mock function with given fields: shortUrl
func (_m *MongoRepo) GetOriginUrl(shortUrl string) (string, error) {
	ret := _m.Called(shortUrl)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortUrls provides a mock function with given fields: searchShortUrl, searchUrl
func (_m *MongoRepo) GetShortUrls(searchShortUrl string, searchUrl string) ([]*mongo.ShortUrlModel, error) {
	ret := _m.Called(searchShortUrl, searchUrl)

	var r0 []*mongo.ShortUrlModel
	if rf, ok := ret.Get(0).(func(string, string) []*mongo.ShortUrlModel); ok {
		r0 = rf(searchShortUrl, searchUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mongo.ShortUrlModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(searchShortUrl, searchUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementHit provides a mock function with given fields: shortUrl
func (_m *MongoRepo) IncrementHit(shortUrl string) error {
	ret := _m.Called(shortUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(shortUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveShortUrl provides a mock function with given fields: shortUrl, originUrl, expireAt
func (_m *MongoRepo) SaveShortUrl(shortUrl string, originUrl string, expireAt int64) error {
	ret := _m.Called(shortUrl, originUrl, expireAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(shortUrl, originUrl, expireAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
